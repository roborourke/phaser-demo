{"name":"Phaser Demo","tagline":"Demo game put together in stages as part of an introduction to phaser.js","body":"Phaser Demo\r\n===========\r\n\r\nDemo game put together in stages as part of an introduction to @photonstorm's phaser.js at [Liverpool JS User Group](http://www.meetup.com/Liverpool-Javascript-user-group-client-server-side-JS/)\r\n\r\n## Installation\r\n\r\n1. Clone the repository\r\n2. Run `npm install`\r\n3. Run `grunt connect`\r\n4. Browse the examples at `http://localhost:8005/indexXX.html`\r\n\r\n<script src=\"phaser.js\"></script>\r\n\r\n<div id=\"game\"></div>\r\n\r\n<script>\r\n\r\n      var game = new Phaser.Game(\r\n        800,                        // width\r\n        400,                        // height\r\n        Phaser.AUTO,                // render mode, CANVAS, WEBGL, HEADLESS, AUTO\r\n        'game',                     // game div id\r\n        {                           // Phaser.State object\r\n          preload: function() {\r\n\r\n            game.load.image( 'background', 'assets/runners/desert_BG.png' );\r\n            game.load.image( 'background-bottom', 'assets/runners/desert_BG_bottom.png' );\r\n            game.load.spritesheet( 'bird', 'assets/birds.png', 128, 128 );\r\n            game.load.image( 'restart', 'assets/restart.png' );\r\n            game.load.image( 'zeppelin', 'assets/zeppelin.png' )\r\n\r\n          },\r\n          create: function() {\r\n\r\n            // could use variables but you can store references anywhere really\r\n            this.bg = game.add.tileSprite( 0, 0, 800, 400, 'background' );\r\n            this.bgbot = game.add.tileSprite( 0, 344, 800, 57, 'background-bottom' );\r\n\r\n            // tilesprites have a nice helper function that scroll the image\r\n            // arguments are x pixels per second and y pixels per second\r\n            this.bg.autoScroll( -20, 0 );\r\n            this.bgbot.autoScroll( -60, 0 );\r\n\r\n            // add the bird\r\n            this.bird = game.add.sprite( game.world.centerX - 100, game.world.centerY, 'bird' );\r\n\r\n            // set the birds anchor point so it's centered\r\n            this.bird.anchor.setTo( .5, .5 );\r\n\r\n            // lets animate the bird\r\n            this.bird.animations.add( 'flap', [ 0, 1 ] );\r\n            this.bird.animations.play( 'flap', 6, true );\r\n\r\n            // make the bird a bit smaller\r\n            this.bird.scale.set( .75, .75 );\r\n\r\n            // PHYSICS!\r\n            // Physics has to be enabled for each sprite individually to\r\n            // keep performance high\r\n\r\n            // start the physics system, we'll use ARCADE\r\n            game.physics.startSystem( Phaser.Physics.ARCADE );\r\n\r\n            // enable physics for the bird\r\n            // adds the sprite.body property\r\n            game.physics.arcade.enable( this.bird );\r\n\r\n            // lets make the bird experience some gravity\r\n            game.physics.arcade.gravity.set( 0, 360 );\r\n            // can be done differently for individual sprites\r\n            // also options\r\n            //this.bird.body.gravity.set( 0, 180 );\r\n\r\n            // lets keep the bird within our game screen!\r\n            this.bird.body.collideWorldBounds = true;\r\n\r\n\r\n            // we want a way to make the bird move up when some input occurs\r\n            // inputs can be applied to the whole game, or just an individual sprite\r\n            game.input.onTap.add( function() {\r\n\r\n              this.bird.body.velocity.y = -200;\r\n\r\n            }, this ); // 2nd arg is the value of 'this' in the callback\r\n\r\n\r\n            // Phaser groups are an easy to work multiple similar objects\r\n            // You can collision detection between an entire group and a sprite\r\n            this.zeppelins = game.add.group();\r\n\r\n            // you can also enable physics for an entire group\r\n            this.zeppelins.enableBody = true;\r\n            this.zeppelins.physicsBodyType = Phaser.Physics.ARCADE;\r\n\r\n            // timers are useful for making things happen repeatedly\r\n            game.time.events.loop( 5000, function() {\r\n\r\n              console.log( 'add zeppelin' );\r\n\r\n              // add a zeppelin to the group at the right edge and a random height\r\n              var zep = this.zeppelins.create(\r\n                game.world.width + 100,\r\n                game.rnd.integerInRange( 0, game.world.height - 100 ),\r\n                'zeppelin'\r\n              );\r\n\r\n              // disable gravity for zeppelins\r\n              zep.body.allowGravity = false;\r\n\r\n              // makes sure that the impact from the bird won't affect it\r\n              zep.body.immovable = true;\r\n\r\n              // we need the sprite to move as well or we'll never see it\r\n              zep.body.velocity.x = -80;\r\n\r\n            }, this );\r\n\r\n            // Add some scoring text in the top left\r\n            this.score = 0;\r\n            this.scoretext = game.add.text(\r\n              5,\r\n              5,\r\n              'Score: ' + this.score,\r\n              { fill: '#fff', font: '20px Futura' }\r\n            );\r\n\r\n            // keep the bottom background on top of everything else for poops & giggles\r\n            game.world.bringToTop( this.bgbot );\r\n          },\r\n          update: function() {\r\n\r\n            // change the rotation based on how quickly we're rising or falling\r\n            this.bird.body.angularVelocity = this.bird.body.velocity.y;\r\n\r\n            // stop the bird from rotating too far!\r\n            if ( this.bird.angle > 60 ) {\r\n              this.bird.angle = 60;\r\n            }\r\n            if ( this.bird.angle < -15 ) {\r\n              this.bird.angle = -15;\r\n            }\r\n\r\n            // check bird collision with floor\r\n            if ( this.bird.body.onFloor() ) {\r\n\r\n              // set the dead bird frame to true\r\n              this.bird.frame = 2;\r\n\r\n              // pause the game\r\n              game.paused = true;\r\n\r\n            }\r\n\r\n            // bird collides with zeppelins\r\n            game.physics.arcade.overlap(       // could use collide too\r\n              this.bird,\r\n              this.zeppelins,\r\n              function( bird, zeppelin ) {     // callback on collision\r\n\r\n                // disable tap event to make the bird fly\r\n                game.input.onTap.removeAll();\r\n\r\n                // make it plummet\r\n                bird.body.velocity.y = 300;\r\n\r\n                // dead face\r\n                this.bird.frame = 2;\r\n\r\n                // stop animation\r\n                this.bird.animations.stop( 'flap' );\r\n\r\n              },\r\n              function( bird, zeppelin ) {     // additional process callback\r\n                // return true or false here to alter collision result\r\n              },\r\n              this                             // callback context\r\n            );\r\n\r\n            // if we get past a zeppelin\r\n            this.zeppelins.forEach( function( zep ) {\r\n              if ( ! zep.scored && zep.x <= this.bird.x ) {\r\n\r\n                // it's a good idea to add checks by extending the sprite or group\r\n                // update is called very quickly multiple times a second\r\n                zep.scored = true;\r\n\r\n                // increase the score by editing the text content directly\r\n                this.score++;\r\n                this.scoretext.text = 'Score: ' + this.score;\r\n              }\r\n            }, this );\r\n\r\n          },\r\n          paused: function() {\r\n            // called when game loop is paused\r\n\r\n            this.result = game.add.text(\r\n              game.world.centerX,           // x\r\n              game.world.centerY,           // y\r\n              'Rubbish!',                   // text\r\n              {                             // style object (based on canvas & pixi.js)\r\n                font: '65px Futura',\r\n                fill: '#fff',\r\n                align: 'center'\r\n              }\r\n            );\r\n            this.result.anchor.set( .5, .5 );\r\n\r\n            // add a restart button\r\n            this.restart = game.add.button(\r\n              game.world.centerX,\r\n              game.world.centerY + 80,\r\n              'restart',\r\n              function() {\r\n                // restart the state\r\n                //game.state.restart();\r\n              }\r\n            );\r\n            this.restart.anchor.set( .5, .5 );\r\n\r\n            // the game itself can take inputs just not items within it!\r\n            game.input.onTap.add( function() {\r\n\r\n              game.state.restart();\r\n              game.paused = false;\r\n\r\n            }, this );\r\n\r\n            // if possible don't pause, just return false from the update loop\r\n\r\n          },\r\n          pauseUpdate: function() {\r\n\r\n\r\n          },\r\n          render: function() {\r\n            // called constantly while phaser is rendering anything\r\n          },\r\n          shutdown: function() {\r\n            // called when state is switched or destroyed\r\n          }\r\n        },\r\n        true,                       // transparent canvas\r\n        true,                       // antialias graphics\r\n        null                        // optional physics config\r\n      );\r\n\r\n</script>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}